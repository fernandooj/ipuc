{
  "service": {
    "service": "picpuc",
    "serviceObject": {
      "name": "picpuc"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "stage": "dev",
      "region": "us-east-1",
      "httpApi": {
        "cors": true
      },
      "apiGateway": {
        "binaryMediaTypes": [
          "*/*"
        ]
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutObject",
            "s3:GetObject"
          ],
          "Resource": "arn:aws:s3:::picpuc/*"
        }
      ],
      "versionFunctions": true,
      "environment": {
        "AWS_REGION_ULR": "us-east-1",
        "RDS_HOSTNAME": "db-picpuc.cjjhqtyxbiax.us-east-1.rds.amazonaws.com",
        "RDS_DB": "DBpicpuc",
        "RDS_PORT": "5432",
        "RDS_USERNAME": "postgres",
        "RDS_PASSWORD": "W8po5IEMHyDJsrW1FWMv",
        "BUCKET": "picpuc"
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CreateEventLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/picpuc-dev-create-event"
            }
          },
          "GetEventsDateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/picpuc-dev-get-events-date"
            }
          },
          "GetEventsNearLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/picpuc-dev-get-events-near"
            }
          },
          "GetCategoriesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/picpuc-dev-get-categories"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "picpuc",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/picpuc-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/picpuc-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "picpuc",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CreateEventLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/picpuc/dev/1682026809912-2023-04-20T21:40:09.912Z/picpuc.zip"
              },
              "Handler": "services/events/src/create-event.main",
              "Runtime": "nodejs12.x",
              "FunctionName": "picpuc-dev-create-event",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_REGION_ULR": "us-east-1",
                  "RDS_HOSTNAME": "db-picpuc.cjjhqtyxbiax.us-east-1.rds.amazonaws.com",
                  "RDS_DB": "DBpicpuc",
                  "RDS_PORT": "5432",
                  "RDS_USERNAME": "postgres",
                  "RDS_PASSWORD": "W8po5IEMHyDJsrW1FWMv",
                  "BUCKET": "picpuc"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateEventLogGroup"
            ]
          },
          "GetEventsDateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/picpuc/dev/1682026809912-2023-04-20T21:40:09.912Z/picpuc.zip"
              },
              "Handler": "services/events/src/get-events-date.main",
              "Runtime": "nodejs12.x",
              "FunctionName": "picpuc-dev-get-events-date",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_REGION_ULR": "us-east-1",
                  "RDS_HOSTNAME": "db-picpuc.cjjhqtyxbiax.us-east-1.rds.amazonaws.com",
                  "RDS_DB": "DBpicpuc",
                  "RDS_PORT": "5432",
                  "RDS_USERNAME": "postgres",
                  "RDS_PASSWORD": "W8po5IEMHyDJsrW1FWMv",
                  "BUCKET": "picpuc"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetEventsDateLogGroup"
            ]
          },
          "GetEventsNearLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/picpuc/dev/1682026809912-2023-04-20T21:40:09.912Z/picpuc.zip"
              },
              "Handler": "services/events/src/get-events-near.handle",
              "Runtime": "nodejs12.x",
              "FunctionName": "picpuc-dev-get-events-near",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_REGION_ULR": "us-east-1",
                  "RDS_HOSTNAME": "db-picpuc.cjjhqtyxbiax.us-east-1.rds.amazonaws.com",
                  "RDS_DB": "DBpicpuc",
                  "RDS_PORT": "5432",
                  "RDS_USERNAME": "postgres",
                  "RDS_PASSWORD": "W8po5IEMHyDJsrW1FWMv",
                  "BUCKET": "picpuc"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetEventsNearLogGroup"
            ]
          },
          "GetCategoriesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/picpuc/dev/1682026809912-2023-04-20T21:40:09.912Z/picpuc.zip"
              },
              "Handler": "services/categories/src/get-categories.handle",
              "Runtime": "nodejs12.x",
              "FunctionName": "picpuc-dev-get-categories",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_REGION_ULR": "us-east-1",
                  "RDS_HOSTNAME": "db-picpuc.cjjhqtyxbiax.us-east-1.rds.amazonaws.com",
                  "RDS_DB": "DBpicpuc",
                  "RDS_PORT": "5432",
                  "RDS_USERNAME": "postgres",
                  "RDS_PASSWORD": "W8po5IEMHyDJsrW1FWMv",
                  "BUCKET": "picpuc"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCategoriesLogGroup"
            ]
          },
          "CreateEventLambdaVersionOhnqcajYTP5ewmoPkW7A7kX3dL7lAY2h1OTTPaSYrY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateEventLambdaFunction"
              },
              "CodeSha256": "5LNFQW6Rj2eYHA4uyWj5n2YQLoxHDiN99+AlVxsEtbM="
            }
          },
          "GetEventsDateLambdaVersionVyVwIbiZyWw4DeSTJIgCCmUZpbyqFSQ0LxQZsE8w0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetEventsDateLambdaFunction"
              },
              "CodeSha256": "5LNFQW6Rj2eYHA4uyWj5n2YQLoxHDiN99+AlVxsEtbM="
            }
          },
          "GetEventsNearLambdaVersionjPJFGTs5XP7aog2zGX0r6fx4XxzVQm4SSDA2ugoQvB4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetEventsNearLambdaFunction"
              },
              "CodeSha256": "5LNFQW6Rj2eYHA4uyWj5n2YQLoxHDiN99+AlVxsEtbM="
            }
          },
          "GetCategoriesLambdaVersionpsO3yb1MJcwXanFvLQrksl6AtcvlnjUxEXLG10sO8I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCategoriesLambdaFunction"
              },
              "CodeSha256": "5LNFQW6Rj2eYHA4uyWj5n2YQLoxHDiN99+AlVxsEtbM="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-picpuc",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowHeaders": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "AllowMethods": [
                  "OPTIONS",
                  "POST",
                  "GET"
                ],
                "AllowOrigins": [
                  "*"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "CreateEventLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateEventLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateEvent": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateEventLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRoutePostEvents": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /events",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateEvent"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateEvent"
          },
          "GetEventsDateLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetEventsDateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetEventsDate": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetEventsDateLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetEventsDateOrderVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /events/date/{order}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetEventsDate"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetEventsDate"
          },
          "GetEventsNearLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetEventsNearLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetEventsNear": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetEventsNearLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetEventsNearCoordsVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /events/near/{coords}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetEventsNear"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetEventsNear"
          },
          "GetCategoriesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCategoriesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetCategories": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetCategoriesLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetCategories": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /categories",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetCategories"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetCategories"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-picpuc-dev-ServerlessDeploymentBucketName"
            }
          },
          "CreateEventLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateEventLambdaVersionOhnqcajYTP5ewmoPkW7A7kX3dL7lAY2h1OTTPaSYrY"
            },
            "Export": {
              "Name": "sls-picpuc-dev-CreateEventLambdaFunctionQualifiedArn"
            }
          },
          "GetEventsDateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetEventsDateLambdaVersionVyVwIbiZyWw4DeSTJIgCCmUZpbyqFSQ0LxQZsE8w0"
            },
            "Export": {
              "Name": "sls-picpuc-dev-GetEventsDateLambdaFunctionQualifiedArn"
            }
          },
          "GetEventsNearLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetEventsNearLambdaVersionjPJFGTs5XP7aog2zGX0r6fx4XxzVQm4SSDA2ugoQvB4"
            },
            "Export": {
              "Name": "sls-picpuc-dev-GetEventsNearLambdaFunctionQualifiedArn"
            }
          },
          "GetCategoriesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCategoriesLambdaVersionpsO3yb1MJcwXanFvLQrksl6AtcvlnjUxEXLG10sO8I"
            },
            "Export": {
              "Name": "sls-picpuc-dev-GetCategoriesLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-picpuc-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-picpuc-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "dotenv": {
        "path": ".env"
      },
      "webpack": {
        "webpackConfig": "webpack.config.js",
        "includeModules": false,
        "packager": "npm",
        "excludeFiles": "src/**/*.test.js"
      },
      "n": "my-app:dev:us-east-1:api",
      "base": "picpuc-dev"
    },
    "plugins": [
      "serverless-dotenv-plugin",
      "serverless-offline",
      "serverless-webpack",
      "serverless-iam-roles-per-function"
    ],
    "pluginsData": {},
    "functions": {
      "createEvent": {
        "name": "picpuc-dev-create-event",
        "handler": "services/events/src/create-event.main",
        "events": [
          {
            "httpApi": "POST /events",
            "resolvedMethod": "POST",
            "resolvedPath": "/events"
          }
        ],
        "environment": {
          "BUCKET": "picpuc"
        },
        "package": {
          "artifact": ".serverless/picpuc.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CreateEventLambdaVersionOhnqcajYTP5ewmoPkW7A7kX3dL7lAY2h1OTTPaSYrY"
      },
      "getEventsDate": {
        "name": "picpuc-dev-get-events-date",
        "handler": "services/events/src/get-events-date.main",
        "events": [
          {
            "httpApi": "GET /events/date/{order}",
            "resolvedMethod": "GET",
            "resolvedPath": "/events/date/{order}"
          }
        ],
        "package": {
          "artifact": ".serverless/picpuc.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetEventsDateLambdaVersionVyVwIbiZyWw4DeSTJIgCCmUZpbyqFSQ0LxQZsE8w0"
      },
      "getEventsNear": {
        "name": "picpuc-dev-get-events-near",
        "handler": "services/events/src/get-events-near.handle",
        "events": [
          {
            "httpApi": "GET /events/near/{coords}",
            "resolvedMethod": "GET",
            "resolvedPath": "/events/near/{coords}"
          }
        ],
        "package": {
          "artifact": ".serverless/picpuc.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetEventsNearLambdaVersionjPJFGTs5XP7aog2zGX0r6fx4XxzVQm4SSDA2ugoQvB4"
      },
      "getCategories": {
        "name": "picpuc-dev-get-categories",
        "handler": "services/categories/src/get-categories.handle",
        "events": [
          {
            "httpApi": "GET /categories",
            "resolvedMethod": "GET",
            "resolvedPath": "/categories"
          }
        ],
        "package": {
          "artifact": ".serverless/picpuc.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetCategoriesLambdaVersionpsO3yb1MJcwXanFvLQrksl6AtcvlnjUxEXLG10sO8I"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "picpuc",
      "frameworkVersion": "3",
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "artifactDirectoryName": "serverless/picpuc/dev/1682026809912-2023-04-20T21:40:09.912Z",
    "artifact": ""
  }
}