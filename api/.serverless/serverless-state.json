{
  "service": {
    "service": "picpuc",
    "serviceObject": {
      "name": "picpuc"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "stage": "dev",
      "region": "us-east-1",
      "apiGateway": {
        "binaryMediaTypes": [
          "*/*"
        ]
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutObject",
            "s3:GetObject"
          ],
          "Resource": "arn:aws:s3:::picpuc/*"
        }
      ],
      "environment": {
        "RDS_HOSTNAME": "db-picpuc.cjjhqtyxbiax.us-east-1.rds.amazonaws.com",
        "RDS_DB": "DBpicpuc",
        "RDS_PORT": "5432",
        "RDS_USERNAME": "postgres",
        "RDS_PASSWORD": "W8po5IEMHyDJsrW1FWMv",
        "AWS_REGION_ULR": "us-east-1",
        "BUCKET": "picpuc"
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CreateEventLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/picpuc-dev-create-event"
            }
          },
          "GetEventsDateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/picpuc-dev-get-events-date"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "picpuc",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/picpuc-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/picpuc-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "picpuc",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CreateEventLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/picpuc/dev/1681761601650-2023-04-17T20:00:01.650Z/picpuc.zip"
              },
              "Handler": "services/events/src/create-event.main",
              "Runtime": "nodejs12.x",
              "FunctionName": "picpuc-dev-create-event",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "RDS_HOSTNAME": "db-picpuc.cjjhqtyxbiax.us-east-1.rds.amazonaws.com",
                  "RDS_DB": "DBpicpuc",
                  "RDS_PORT": "5432",
                  "RDS_USERNAME": "postgres",
                  "RDS_PASSWORD": "W8po5IEMHyDJsrW1FWMv",
                  "AWS_REGION_ULR": "us-east-1",
                  "BUCKET": "picpuc"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateEventLogGroup"
            ]
          },
          "GetEventsDateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/picpuc/dev/1681761601650-2023-04-17T20:00:01.650Z/picpuc.zip"
              },
              "Handler": "services/events/src/get-events-date.main",
              "Runtime": "nodejs12.x",
              "FunctionName": "picpuc-dev-get-events-date",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "RDS_HOSTNAME": "db-picpuc.cjjhqtyxbiax.us-east-1.rds.amazonaws.com",
                  "RDS_DB": "DBpicpuc",
                  "RDS_PORT": "5432",
                  "RDS_USERNAME": "postgres",
                  "RDS_PASSWORD": "W8po5IEMHyDJsrW1FWMv",
                  "AWS_REGION_ULR": "us-east-1",
                  "BUCKET": "picpuc"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetEventsDateLogGroup"
            ]
          },
          "CreateEventLambdaVersiongX2WFMtZ5wzVlXkylpmDeOTGWlHgi9qFWlBYcfEj71I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateEventLambdaFunction"
              },
              "CodeSha256": "1VmcAYczrH1thVWrIMcL870nFCLBMfZ4NPA09IvYHOg="
            }
          },
          "GetEventsDateLambdaVersions9yvXxYFGjQfGcqKZiULfJtCZZGZ0qPrgXiSrdghhE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetEventsDateLambdaFunction"
              },
              "CodeSha256": "1VmcAYczrH1thVWrIMcL870nFCLBMfZ4NPA09IvYHOg="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-picpuc",
              "BinaryMediaTypes": [
                "*/*"
              ],
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceEvents": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "events",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEventsDate": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEvents"
              },
              "PathPart": "date",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEventsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEvents"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEventsDateOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEventsDate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEventsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEvents"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateEventLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateEventLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEventsDateGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.querystring.order": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEventsDate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetEventsDateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "PassthroughBehavior": "WHEN_NO_TEMPLATES",
                "RequestTemplates": {
                  "application/json": "{\n  \"order\": \"$input.params('order')\"\n}\n",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "SelectionPattern": "",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "$input.json('$')"
                    }
                  },
                  {
                    "StatusCode": "400",
                    "SelectionPattern": ".*\"httpStatus\":400.*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n{\n  \"type\": \"$errorMessageObj.errorType\",\n  \"message\": \"$errorMessageObj.message\",\n  \"requestId\": \"$context.requestId\"\n}\n"
                    }
                  },
                  {
                    "StatusCode": "422",
                    "SelectionPattern": ".*\"httpStatus\":422.*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n{\n  \"type\": \"$errorMessageObj.errorType\",\n  \"message\": \"$errorMessageObj.message\",\n  \"requestId\": \"$context.requestId\"\n}\n"
                    }
                  },
                  {
                    "StatusCode": "500",
                    "SelectionPattern": ".*\"httpStatus\":500.*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n{\n  \"type\": \"$errorMessageObj.errorType\",\n  \"message\": \"$errorMessageObj.message\",\n  \"requestId\": \"$context.requestId\"\n}\n"
                    }
                  },
                  {
                    "StatusCode": "504",
                    "SelectionPattern": ".* timed out .*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set ($errorMessage = $input.path('$.errorMessage'))\n{\n  \"type\": \"gatewayTimeout\",\n  \"message\": \"$errorMessage\",\n  \"requestId\": \"$context.requestId\"\n}\n"
                    }
                  }
                ],
                "RequestParameters": {
                  "integration.request.querystring.order": "method.request.querystring.order"
                }
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "200"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "400"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "422"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "500"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "504"
                }
              ],
              "RequestValidatorId": {
                "Ref": "ApiGatewayPicpucRequestValidator"
              }
            },
            "DependsOn": [
              "GetEventsDateLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayPicpucRequestValidator": {
            "Type": "AWS::ApiGateway::RequestValidator",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ValidateRequestBody": true,
              "ValidateRequestParameters": true,
              "Name": "picpuc-dev | Validate request body and querystring parameters"
            }
          },
          "ApiGatewayDeployment1681761596144": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodEventsOptions",
              "ApiGatewayMethodEventsDateOptions",
              "ApiGatewayMethodEventsPost",
              "ApiGatewayMethodEventsDateGet"
            ]
          },
          "CreateEventLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateEventLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetEventsDateLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetEventsDateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-picpuc-dev-ServerlessDeploymentBucketName"
            }
          },
          "CreateEventLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateEventLambdaVersiongX2WFMtZ5wzVlXkylpmDeOTGWlHgi9qFWlBYcfEj71I"
            },
            "Export": {
              "Name": "sls-picpuc-dev-CreateEventLambdaFunctionQualifiedArn"
            }
          },
          "GetEventsDateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetEventsDateLambdaVersions9yvXxYFGjQfGcqKZiULfJtCZZGZ0qPrgXiSrdghhE"
            },
            "Export": {
              "Name": "sls-picpuc-dev-GetEventsDateLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-picpuc-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "dotenv": {
        "path": ".env"
      },
      "webpack": {
        "webpackConfig": "webpack.config.js",
        "includeModules": false,
        "packager": "npm",
        "excludeFiles": "src/**/*.test.js"
      },
      "n": "my-app:dev:us-east-1:api",
      "base": "picpuc-dev",
      "rds": {
        "host_name": "db-picpuc.cjjhqtyxbiax.us-east-1.rds.amazonaws.com",
        "db": "DBpicpuc",
        "user_name": "postgres",
        "password": "W8po5IEMHyDJsrW1FWMv",
        "port": 5432
      }
    },
    "plugins": [
      "serverless-dotenv-plugin",
      "serverless-offline",
      "serverless-webpack",
      "serverless-iam-roles-per-function"
    ],
    "pluginsData": {},
    "functions": {
      "createEvent": {
        "name": "picpuc-dev-create-event",
        "handler": "services/events/src/create-event.main",
        "events": [
          {
            "http": {
              "path": "events",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "BUCKET": "picpuc"
        },
        "integration": "lambda",
        "request": {
          "headers": {
            "Content-Type": "'multipart/form-data'"
          },
          "passThrough": "WHEN_NO_TEMPLATES",
          "template": {
            "application/json": "#set($inputRoot = $input.path('$'))\n{\n  \"title\": \"$inputRoot.title\",\n  \"description\": \"$inputRoot.description\",\n  \"event_date\": \"$inputRoot.event_date\",\n  \"image_url\": \"$inputRoot.image_url\",\n  \"category_id\": \"$inputRoot.category_id\",\n  \"place_name\": \"$inputRoot.place_name\",\n  \"location\": \"$inputRoot.location\"\n}\n  response:\n    headers:\n      Content-Type: \"'application/json'\"\n    template: $input.json('$')\n    statusCodes:\n      400:\n        pattern: '.*\"httpStatus\":400.*'\n        template: #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n{\n  \"type\": \"$errorMessageObj.errorType\",\n  \"message\": \"$errorMessageObj.message\",\n  \"requestId\": \"$context.requestId\"\n}\n\n        headers:\n          Content-Type: \"'application/json'\"\n      422:\n        pattern: '.*\"httpStatus\":422.*'\n        template: #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n{\n  \"type\": \"$errorMessageObj.errorType\",\n  \"message\": \"$errorMessageObj.message\",\n  \"requestId\": \"$context.requestId\"\n}\n\n        headers:\n          Content-Type: \"'application/json'\"\n      500:\n        pattern: '.*\"httpStatus\":500.*'\n        template: #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n{\n  \"type\": \"$errorMessageObj.errorType\",\n  \"message\": \"$errorMessageObj.message\",\n  \"requestId\": \"$context.requestId\"\n}\n\n        headers:\n          Content-Type: \"'application/json'\"\n      504:\n        pattern: '.* timed out .*'\n        template: #set ($errorMessage = $input.path('$.errorMessage'))\n{\n  \"type\": \"gatewayTimeout\",\n  \"message\": \"$errorMessage\",\n  \"requestId\": \"$context.requestId\"\n}\n\n        headers:\n          Content-Type: \"'application/json'\"\n"
          }
        },
        "package": {
          "artifact": ".serverless/picpuc.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CreateEventLambdaVersiongX2WFMtZ5wzVlXkylpmDeOTGWlHgi9qFWlBYcfEj71I"
      },
      "getEventsDate": {
        "name": "picpuc-dev-get-events-date",
        "handler": "services/events/src/get-events-date.main",
        "events": [
          {
            "http": {
              "path": "events/date",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS",
              "request": {
                "parameters": {
                  "method.request.querystring.order": true
                },
                "headers": {
                  "Content-Type": "'application/json'"
                },
                "passThrough": "WHEN_NO_TEMPLATES",
                "template": {
                  "application/json": "{\n  \"order\": \"$input.params('order')\"\n}\n"
                }
              },
              "response": {
                "headers": {
                  "Content-Type": "'application/json'"
                },
                "template": "$input.json('$')",
                "statusCodes": {
                  "200": {
                    "pattern": ""
                  },
                  "400": {
                    "pattern": ".*\"httpStatus\":400.*",
                    "template": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n{\n  \"type\": \"$errorMessageObj.errorType\",\n  \"message\": \"$errorMessageObj.message\",\n  \"requestId\": \"$context.requestId\"\n}\n",
                    "headers": {
                      "Content-Type": "'application/json'"
                    }
                  },
                  "422": {
                    "pattern": ".*\"httpStatus\":422.*",
                    "template": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n{\n  \"type\": \"$errorMessageObj.errorType\",\n  \"message\": \"$errorMessageObj.message\",\n  \"requestId\": \"$context.requestId\"\n}\n",
                    "headers": {
                      "Content-Type": "'application/json'"
                    }
                  },
                  "500": {
                    "pattern": ".*\"httpStatus\":500.*",
                    "template": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n{\n  \"type\": \"$errorMessageObj.errorType\",\n  \"message\": \"$errorMessageObj.message\",\n  \"requestId\": \"$context.requestId\"\n}\n",
                    "headers": {
                      "Content-Type": "'application/json'"
                    }
                  },
                  "504": {
                    "pattern": ".* timed out .*",
                    "template": "#set ($errorMessage = $input.path('$.errorMessage'))\n{\n  \"type\": \"gatewayTimeout\",\n  \"message\": \"$errorMessage\",\n  \"requestId\": \"$context.requestId\"\n}\n",
                    "headers": {
                      "Content-Type": "'application/json'"
                    }
                  }
                }
              }
            }
          }
        ],
        "package": {
          "artifact": ".serverless/picpuc.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetEventsDateLambdaVersions9yvXxYFGjQfGcqKZiULfJtCZZGZ0qPrgXiSrdghhE"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "picpuc",
      "frameworkVersion": "3",
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "artifactDirectoryName": "serverless/picpuc/dev/1681761601650-2023-04-17T20:00:01.650Z",
    "artifact": ""
  }
}