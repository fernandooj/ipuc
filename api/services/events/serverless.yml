service: fasana
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name
plugins:
  - serverless-offline
# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
  
# provider:
#   name: aws
#   runtime: nodejs10.x
#   stage: ${opt:stage, "dev"}
#   region: ${opt:region, "us-west-2"}
#   apiGateway:
#     restApiId: ${output:${self:custom.n}.ApiId}
#     restApiRootResourceId: ${output:${self:custom.n}.ApiResourceId}

# custom:
#   n: my-app:${self:provider.stage}:${self:provider.region}:api
#   base: ${self:service}-${self:provider.stage}
  
# functions:
#   invoices:
#     name: ${self:custom.base}-invoices
#     handler: index.handler
#     events:
#       - http:
#           path: /users
#           method: post
#           cors: true
#     package:
#       include:
#         - src/handlers/invoices/**
#         - ../lib/**
#   collections:
#     name: ${self:custom.base}-collections
#     handler: index.handler
#     events:
#       - http:
#           path: /collections
#           method: get
#           cors: true
#     package:
#       include:
#         - src/handlers/collections/**
#         - ../lib/**


# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

# functions:
#   hello:
#     handler: handler.fasana
#     events:
#      - http:
#          path: users
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
# resources:
#   Resources:
#     CognitoUserPool:
#       Type: "AWS::Cognito::UserPool"
#       Properties:
#         MfaConfiguration: OFF
#         UserPoolName: my-user-pool
#         UsernameAttributes:
#           - email
#         Policies:
#           PasswordPolicy:
#             MinimumLength: 6
#             RequireLowercase: False
#             RequireNumbers: True
#             RequireSymbols: False
#             RequireUppercase: True
#   CognitoUserPoolClient:
#     Type: "AWS::Cognito::UserPoolClient"
#     Properties:
#       ClientName: my-user-pool-client
#       GenerateSecret: False
#       UserPoolId:
#         Ref: CognitoUserPool
